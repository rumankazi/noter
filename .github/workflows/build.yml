name: Build and Release

on:
  push:
    branches: [main, test-release]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: latest
          cache: "pnpm"
          cache-dependency-path: "pnpm-lock.yaml"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests
        run: pnpm test --run

      - name: Run lint
        run: pnpm lint

  build:
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/test-release')
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        include:
          - os: macos-latest
            platform: mac
            artifact_name: noter-macos
            artifact_patterns: |
              release/*.dmg
              release/*.zip
          - os: windows-latest
            platform: win
            artifact_name: noter-windows
            artifact_patterns: |
              release/*.exe
              release/*-portable.exe
          - os: ubuntu-latest
            platform: linux
            artifact_name: noter-linux
            artifact_patterns: |
              release/*.AppImage
              release/*.deb
              release/*.rpm
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: latest
          cache: "pnpm"
          cache-dependency-path: "pnpm-lock.yaml"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libnss3-dev libatk-bridge2.0-dev libxss1 libasound2-dev

      - name: Build application
        run: pnpm build

      - name: Package application (macOS)
        if: matrix.os == 'macos-latest'
        run: pnpm package:mac:dev
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Skip code signing on CI for now
          CSC_IDENTITY_AUTO_DISCOVERY: false

      - name: Package application (Windows)
        if: matrix.os == 'windows-latest'
        run: pnpm package:win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Package application (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: pnpm package:linux:full
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Upload artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: ${{ matrix.artifact_name }}
      #     path: ${{ matrix.artifact_patterns }}
      #     retention-days: 1

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          # Use PAT with write permissions for semantic-release
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: latest
          cache: "pnpm"
          cache-dependency-path: "pnpm-lock.yaml"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Organize release files
        run: |
          mkdir -p release
          # Move all build artifacts to release directory
          find artifacts -type f \( -name "*.dmg" -o -name "*.zip" -o -name "*.exe" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" \) -exec mv {} release/ \;
          echo "Release files:"
          ls -la release/

      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: github-actions[bot]
          GIT_AUTHOR_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com
          GIT_COMMITTER_NAME: github-actions[bot]
          GIT_COMMITTER_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          echo "Starting semantic-release..."
          if [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.pull_request.merged }}" == "true" ]]; then
          echo "Running pnpm release (PR merged)..."
            pnpm semantic-release --debug
          else
            echo "Dry run pnpm release..."
            pnpm semantic-release --dry-run --debug
          fi
