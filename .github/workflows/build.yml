name: Build and Release

on:
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      release_type:
        description: "Type of release to create"
        required: false
        default: "auto"
        type: choice
        options:
          - "auto"
          - "patch"
          - "minor"
          - "major"
      skip_tests:
        description: "Skip running tests (use with caution)"
        required: false
        default: false
        type: boolean
      force_release:
        description: "Force a release even if no changes warrant one"
        required: false
        default: false
        type: boolean

jobs:
  test:
    name: Test Suite
    runs-on: macos-latest
    if: github.event_name != 'workflow_dispatch' || !inputs.skip_tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: latest
          cache: "pnpm"
          cache-dependency-path: "pnpm-lock.yaml"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run lint
        run: pnpm lint

      - name: Run unit tests
        run: pnpm test --run

      - name: Build application for E2E tests
        run: pnpm build

      - name: Run E2E tests
        run: pnpm test:e2e
        env:
          CI: true

  # Quick validation build for PRs (no artifacts)
  pr-build:
    name: PR Build Validation
    needs: test
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: latest
          cache: "pnpm"
          cache-dependency-path: "pnpm-lock.yaml"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build

      - name: Test packaging (Linux only for speed)
        run: pnpm package:linux
        env:
          # Skip code signing on CI
          CSC_IDENTITY_AUTO_DISCOVERY: false

      - name: Verify build artifacts
        run: |
          echo "Build artifacts created:"
          ls -la release/ || echo "No release directory found"

      - name: PR Build Summary
        run: |
          echo "‚úÖ PR build validation completed successfully!"
          echo "- Linting: Passed"
          echo "- Unit Tests: Passed" 
          echo "- E2E Tests: Passed"
          echo "- Build: Passed"
          echo ""
          echo "This PR is ready for review. Full multi-platform builds will run when merged to main."

  # Semantic release dry-run for PRs
  pr-release-preview:
    name: Preview Release Changes
    needs: [test, pr-build]
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: latest
          cache: "pnpm"
          cache-dependency-path: "pnpm-lock.yaml"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Configure git for semantic-release
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Run semantic-release dry-run
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: github-actions[bot]
          GIT_AUTHOR_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com
          GIT_COMMITTER_NAME: github-actions[bot]
          GIT_COMMITTER_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com
        run: |
          echo "üîç Running semantic-release in dry-run mode to preview changes..."
          echo ""

          # Capture the dry-run output
          if pnpm semantic-release --dry-run > dry-run-output.txt 2>&1; then
            echo "‚úÖ Semantic-release dry-run completed successfully!"
            echo ""
            echo "## üìã Release Preview"
            echo ""
            
            # Extract version information if available
            if grep -q "The next release version is" dry-run-output.txt; then
              NEXT_VERSION=$(grep "The next release version is" dry-run-output.txt | sed 's/.*The next release version is //')
              echo "üè∑Ô∏è **Next Version:** $NEXT_VERSION"
              echo ""
            else
              echo "‚ÑπÔ∏è **No release needed** - No significant changes detected that would trigger a release."
              echo ""
            fi
            
            # Show the output for debugging
            echo "### üìÑ Full Dry-Run Output:"
            echo '```'
            cat dry-run-output.txt
            echo '```'
          else
            echo "‚ùå Semantic-release dry-run failed!"
            echo "### üìÑ Error Output:"
            echo '```'
            cat dry-run-output.txt
            echo '```'
            exit 1
          fi

      - name: Comment PR with release preview
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            let comment = '## üöÄ Release Preview\n\n';

            try {
              const output = fs.readFileSync('dry-run-output.txt', 'utf8');
              
              if (output.includes('The next release version is')) {
                const versionMatch = output.match(/The next release version is (\S+)/);
                const nextVersion = versionMatch ? versionMatch[1] : 'unknown';
                
                comment += `‚úÖ **This PR will trigger a new release!**\n\n`;
                comment += `üè∑Ô∏è **Next Version:** \`${nextVersion}\`\n\n`;
                comment += `### Changes included in this release:\n`;
                
                // Extract release notes if available
                if (output.includes('Release note for version')) {
                  const releaseNotesMatch = output.match(/Release note for version[\s\S]*?(?=\n\n|\n$|$)/);
                  if (releaseNotesMatch) {
                    comment += '```\n' + releaseNotesMatch[0] + '\n```\n\n';
                  }
                }
                
                comment += `### üì¶ Build Artifacts\n`;
                comment += `When this PR is merged, the following artifacts will be built:\n`;
                comment += `- ü™ü Windows Installer (.exe)\n`;
                comment += `- üçé macOS Installer (.dmg)\n`;
                comment += `- üêß Linux AppImage, DEB, and RPM packages\n\n`;
              } else if (output.includes('no release')) {
                comment += `‚ÑπÔ∏è **No release will be triggered by this PR.**\n\n`;
                comment += `The changes in this PR don't meet the criteria for a new release. This could be because:\n`;
                comment += `- Only documentation, tests, or CI changes\n`;
                comment += `- No conventional commit format used\n`;
                comment += `- Changes don't include feat:, fix:, or breaking changes\n\n`;
              } else {
                comment += `‚ö†Ô∏è **Unable to determine release impact.**\n\n`;
                comment += `Please check the workflow logs for more details.\n\n`;
              }
              
              comment += `<details>\n<summary>üìÑ Full semantic-release dry-run output</summary>\n\n\`\`\`\n${output}\n\`\`\`\n</details>`;
              
            } catch (error) {
              comment += `‚ùå **Error running release preview:** ${error.message}\n\n`;
              comment += `Please check the workflow logs for more details.`;
            }

            // Find existing comment to update or create new one
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existingComment = comments.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('üöÄ Release Preview')
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
              console.log('Updated existing release preview comment');
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
              console.log('Created new release preview comment');
            }

  # Full multi-platform build for main branch and workflow dispatch
  build:
    name: Build Release Artifacts
    needs: [test]
    if: |
      always() && 
      (needs.test.result == 'success' || (github.event_name == 'workflow_dispatch' && inputs.skip_tests)) &&
      ((github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch')
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        include:
          - os: macos-latest
            platform: mac
            artifact_name: noter-macos
            artifact_patterns: |
              release/*.dmg
              release/*.zip
          - os: windows-latest
            platform: win
            artifact_name: noter-windows
            artifact_patterns: |
              release/*.exe
              release/*-portable.exe
          - os: ubuntu-latest
            platform: linux
            artifact_name: noter-linux
            artifact_patterns: |
              release/*.AppImage
              release/*.deb
              release/*.rpm
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: latest
          cache: "pnpm"
          cache-dependency-path: "pnpm-lock.yaml"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libnss3-dev libatk-bridge2.0-dev libxss1 libasound2-dev

      - name: Build application
        run: pnpm build

      - name: Generate icons
        run: pnpm icons

      - name: Package application
        run: pnpm package:${{ matrix.platform }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Skip code signing on CI for now
          CSC_IDENTITY_AUTO_DISCOVERY: false

      - name: Package application (Windows)
        if: matrix.os == 'windows-latest'
        run: pnpm package:win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Package application (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: pnpm package:linux
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_path }}
          retention-days: 30
          if-no-files-found: error

  # Semantic release for main branch pushes and workflow dispatch
  release:
    name: Create Release
    needs: build
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: latest
          cache: "pnpm"
          cache-dependency-path: "pnpm-lock.yaml"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          path: artifacts

      - name: Organize release files
        run: |
          mkdir -p release
          # Move all build artifacts to release directory
          find artifacts -type f \( -name "*.exe" -o -name "*.msi" -o -name "*.dmg" -o -name "*.zip" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" \) -exec mv {} release/ \;
          echo "Release files prepared:"
          ls -la release/
          echo "Total files: $(ls -1 release/ | wc -l)"

      - name: Determine release trigger
        id: release-trigger
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "trigger=Manual workflow dispatch" >> $GITHUB_OUTPUT
            echo "type=manual" >> $GITHUB_OUTPUT
            echo "release_type=${{ inputs.release_type || 'auto' }}" >> $GITHUB_OUTPUT
            echo "force_release=${{ inputs.force_release || 'false' }}" >> $GITHUB_OUTPUT
            echo "skip_tests=${{ inputs.skip_tests || 'false' }}" >> $GITHUB_OUTPUT
          else
            echo "trigger=Automatic push to main branch" >> $GITHUB_OUTPUT
            echo "type=automatic" >> $GITHUB_OUTPUT
            echo "release_type=auto" >> $GITHUB_OUTPUT
            echo "force_release=false" >> $GITHUB_OUTPUT
            echo "skip_tests=false" >> $GITHUB_OUTPUT
          fi

      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: github-actions[bot]
          GIT_AUTHOR_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com
          GIT_COMMITTER_NAME: github-actions[bot]
          GIT_COMMITTER_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com
        run: |
          echo "üöÄ Starting semantic-release process..."
          echo "üìã Trigger: ${{ steps.release-trigger.outputs.trigger }}"

          if [[ "${{ steps.release-trigger.outputs.type }}" == "manual" ]]; then
            echo "üîß Release Type: ${{ steps.release-trigger.outputs.release_type }}"
            echo "üîÑ Force Release: ${{ steps.release-trigger.outputs.force_release }}"
            echo "‚ö° Skip Tests: ${{ steps.release-trigger.outputs.skip_tests }}"
          fi
          echo ""

          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Build semantic-release command with options
          SEMANTIC_RELEASE_CMD="pnpm semantic-release"

          # Add force release flag if specified
          if [[ "${{ steps.release-trigger.outputs.force_release }}" == "true" ]]; then
            echo "‚ö†Ô∏è Force release enabled - will attempt to create a release even without significant changes"
          fi

          # Note: Manual release type selection would require custom semantic-release config
          # For now, we'll let semantic-release determine the version based on commits
          if [[ "${{ steps.release-trigger.outputs.release_type }}" != "auto" ]]; then
            echo "‚ÑπÔ∏è Manual release type '${{ steps.release-trigger.outputs.release_type }}' specified"
            echo "   This will be respected if there are changes that warrant a release"
          fi

          if eval $SEMANTIC_RELEASE_CMD; then
            echo ""
            echo "‚úÖ Semantic-release completed successfully!"
          else
            echo ""
            echo "‚ÑπÔ∏è Semantic-release completed (no release needed or failed)"
            # Don't exit with error if no release is needed
            exit 0
          fi

      - name: Release Summary
        if: always()
        run: |
          echo "üöÄ Release workflow completed!"
          echo "üìã Trigger: ${{ steps.release-trigger.outputs.trigger }}"
          echo "- Multi-platform builds: Completed"
          echo "- Artifacts uploaded: $(ls -1 release/ 2>/dev/null | wc -l || echo 0) files"
          echo "- Semantic release: Completed"
          echo ""
          if [[ "${{ steps.release-trigger.outputs.type }}" == "manual" ]]; then
            echo "‚ÑπÔ∏è This was a manual release triggered via workflow dispatch."
          else
            echo "‚ÑπÔ∏è This was an automatic release triggered by a push to main branch."
          fi
          echo ""
          echo "Check the Releases page: ${{ github.server_url }}/${{ github.repository }}/releases"
