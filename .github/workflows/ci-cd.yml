name: CI/CD Pipeline

on:
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  CI: true
  PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1 # Skip browser downloads since we're testing Electron

jobs:
  # Separate job for each platform to better isolate issues
  test-windows:
    name: Test on Windows
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Ensure consistent line endings across platforms
          fetch-depth: 0

      - name: Configure git for consistent line endings
        run: |
          git config core.autocrlf false
          git config core.eol lf
          # Fix line endings for existing files
          git add --renormalize .
          git status --porcelain

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          cache: 'pnpm'
          cache-dependency-path: 'pnpm-lock.yaml'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Normalize line endings (Windows)
        run: |
          # Use Prettier to fix line endings before linting
          pnpm exec prettier --write . --loglevel warn
        shell: bash

      - name: Run linter
        run: pnpm run lint
        env:
          # Ensure consistent behavior across platforms
          ESLINT_USE_FLAT_CONFIG: false

      - name: Run unit tests
        run: pnpm run test

      - name: Build application
        run: pnpm run build

      - name: Run E2E tests
        run: pnpm run test:e2e

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-results-windows
          path: |
            test-results/
            playwright-report/

  test-macos:
    name: Test on macOS
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          cache: 'pnpm'
          cache-dependency-path: 'pnpm-lock.yaml'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linter
        run: pnpm run lint

      - name: Run unit tests
        run: pnpm run test

      - name: Build application
        run: pnpm run build

      - name: Run E2E tests
        run: pnpm run test:e2e

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-results-macos
          path: |
            test-results/
            playwright-report/

  test-ubuntu:
    name: Test on Ubuntu
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          cache: 'pnpm'
          cache-dependency-path: 'pnpm-lock.yaml'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linter
        run: pnpm run lint

      - name: Run unit tests
        run: pnpm run test

      - name: Build application
        run: pnpm run build

      # Enhanced Linux setup to match Docker environment
      - name: Setup headless display and GUI libraries
        run: |
          sudo apt-get update
          # Install GUI and display libraries with fallbacks for newer Ubuntu versions
          sudo apt-get install -y \
            xvfb \
            libgtk-3-0 \
            libgbm-dev \
            libx11-xcb1 \
            libxcomposite1 \
            libxdamage1 \
            libxrandr2 \
            libxss1 \
            libxtst6 \
            libdrm2 \
            libxkbcommon0 \
            libatspi2.0-0 \
            libnss3 \
            dbus-x11
          # Install audio library with fallback for newer Ubuntu
          sudo apt-get install -y libasound2t64 || sudo apt-get install -y libasound2 || true

      - name: Start virtual display
        run: |
          export DISPLAY=:99
          Xvfb :99 -screen 0 1024x768x24 -ac +extension GLX +render -noreset > /dev/null 2>&1 &
          sleep 3
          echo "DISPLAY=:99" >> $GITHUB_ENV

      - name: Run E2E tests with enhanced environment
        run: pnpm run test:e2e
        env:
          DISPLAY: ':99'
          ELECTRON_DISABLE_SANDBOX: '1'

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-results-ubuntu
          path: |
            test-results/
            playwright-report/

  # Test Docker containers for comparison
  # test-docker:
  #   name: Test Docker Containers
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Build Ubuntu container
  #       run: docker-compose -f docker/docker-compose.test.yml build test-ubuntu

  #     - name: Build macOS container
  #       run: docker-compose -f docker/docker-compose.test.yml build test-macos

  #     - name: Test Ubuntu container
  #       run: timeout 300 docker-compose -f docker/docker-compose.test.yml run --rm test-ubuntu

  #     - name: Test macOS container
  #       run: timeout 300 docker-compose -f docker/docker-compose.test.yml run --rm test-macos

  #     - name: Upload Docker test results
  #       uses: actions/upload-artifact@v4
  #       if: failure()
  #       with:
  #         name: test-results-docker
  #         path: |
  #           test-results/
  #           playwright-report/

  build-and-package:
    needs: [test-windows, test-macos, test-ubuntu]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Native Linux build (fast and reliable)
          - os: ubuntu-latest
            platform: linux
            artifact-name: noter-linux
            build-command: pnpm run dist:linux
          # Native Windows build (avoids cross-compilation and signing complexities)
          - os: windows-latest
            platform: win32
            artifact-name: noter-windows
            build-command: pnpm run dist:win
          # Native macOS build (required for code signing and notarization)
          - os: macos-latest
            platform: darwin
            artifact-name: noter-macos
            build-command: pnpm run dist:mac

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          cache: 'pnpm'
          cache-dependency-path: 'pnpm-lock.yaml'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm run build

      - name: Package application (Linux)
        if: matrix.platform == 'linux'
        run: ${{ matrix.build-command }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Package application (Windows)
        if: matrix.platform == 'win32'
        run: |
          # Normalize line endings before packaging
          pnpm exec prettier --write . --loglevel warn
          ${{ matrix.build-command }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_IDENTITY_AUTO_DISCOVERY: false

      - name: Package application (macOS)
        if: matrix.platform == 'darwin'
        run: ${{ matrix.build-command }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: |
            release/*.exe
            release/*.dmg
            release/*.AppImage
            release/*.deb
            release/*.zip
            release/*.tar.gz
          retention-days: 7

  release:
    needs: [test-windows, test-macos, test-ubuntu, build-and-package]
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          cache: 'pnpm'
          cache-dependency-path: 'pnpm-lock.yaml'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: Run semantic release
        run: pnpm exec semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
